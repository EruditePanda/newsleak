# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# PAGES                                                                                         #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
GET         /                                                controllers.Application.index

#comment for alternate index page
#GET         /alt                                                controllers.Application.index_alt

#GET         /internal                                        controllers.Application.index
# Play routes serving HTML to AngularJS start with /partials
#GET			/partials/*file						                 controllers.Application.loadPublicHTML(file)

GET    /docById           		controllers.DocumentController.getDocById(id: Int)
GET    /getDocs           		controllers.DocumentController.getDocs(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String)
GET    /getGraphData         	controllers.NetworkController.getGraphData(leastOrMostFrequent: Int, amount: List[Int], minEdgeFreq: Int, maxEdgeFreq: Int)
GET    /getRelations           controllers.NetworkController.getRelations(entities: List[Long], minEdgeFreq: Int, maxEdgeFreq: Int)
GET     /induceSubgraph         controllers.NetworkController.induceSubgraph(fullText: List[String],generic: Map[String, List[String]],entities: List[Long],timeRange: String,size: Int,filter: List[Long])
GET    /docsByCountry         	controllers.MapController.getDocsForCountry(countryCode: String)
GET    /getEgoNetworkData       controllers.NetworkController.getEgoNetworkData(leastOrMostFrequent: Int, id: Long, amountOfType: List[Int], existingNodes: List[Long])
GET    /getIdsByName             controllers.NetworkController.getIdsByName(name: String)
GET    /deleteEntityById		controllers.NetworkController.deleteEntityById(id: Long)
GET	   /mergeEntitiesById		controllers.NetworkController.mergeEntitiesById(focalid: Int, ids: List[Long])
GET    /changeEntityNameById	controllers.NetworkController.changeEntityNameById(id: Long, newName: String)
GET    /changeEntityTypeById	controllers.NetworkController.changeEntityTypeById(id: Long, newType: String)
GET    /getAutocomplete		controllers.SearchController.getAutocomplete(query: String)
GET    /getEntities		controllers.EntityController.getEntities(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, size: Int, entityType: String, filter: List[Long])
GET     /getEntityTypes controllers.EntityController.getEntityTypes
GET    /getEntitiesByType		controllers.EntityController.getEntitiesByType(entityType: String)
GET   /getMetadata     controllers.MetadataController.getMetadata(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String)
GET   /getKeywords     controllers.MetadataController.getKeywords(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String)
GET   /getMetadataTypes       controllers.MetadataController.getMetadataTypes
GET    /getSpecificMetadata             controllers.MetadataController.getSpecificMetadata(fullText: List[String], key: String, generic: Map[String, List[String]], entities: List[Long], instances: List[String], timeRange: String)
GET     /getHistogram               controllers.HistogramController.getHistogram(fullText: List[String], generic: Map[String, List[String]], entities: List[Long], timeRange: String, lod: String)
GET      /getHistogramLod         controllers.HistogramController.getHistogramLod

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# JS ROUTING AND RESOURCES                                                                      #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
GET     	  /assets/javascripts/jsroutes.js  		     controllers.Application.jsRoutes()
GET         /vassets/*file          				         controllers.Assets.versioned(path="/public", file: Asset)
GET         /assets/*file                            controllers.Assets.at(path="/public", file)
